class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
            //Key is the number and value is its index in the vector.
	unordered_map<int, int> hash;
	vector<int> result;
	for (int i = 0; i < nums.size(); i++) {
		int numberToFind = target - nums[i];

            //if numberToFind is found in map, return them
		if (hash.find(numberToFind) != hash.end()) {
                    //+1 because indices are NOT zero based
			result.push_back(hash[numberToFind]);
			result.push_back(i);			
			return result;
		}

            //number was not found. Put it in the map.
		hash[nums[i]] = i;
	}
	return result;
    }
};
自己做的时候用的暴力解法，看到别人给出的一种采用哈希表的方法。
他先建立了一个key为数组元素，value为数组下标的哈希表，然后从第一个数组元素开始，每个数组元素都查找数组中该元素之前的数组元素中是否存在符合要求的元素（相当于从第一个数组元素开始每个数组元素都查找数组中该元素之后的数组元素中是否存在符合要求的元素的相反过程），没有就把当前元素添加到哈希表中，这样哈希表中的内容始终是每个数组元素之前的所有数组元素。
